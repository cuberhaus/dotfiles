#! /bin/bash

###############################################################
# Info:
# & send a process to background. Example: discord &
# ! disown a process. Example: discord ! 
# </dev/null &>/dev/null completely silence a process.
# Combinations are possible. Example: discord &!
# alias="" Is created during shell startup and won't change
# alias='' Is created during runtime and will evaluate every time it's called
# $RANDOM will generate a random number from 0 through 32767
# array=('Element1' 'Element2')
# Use mimeopen to set default apps
###############################################################

alias bsc='eval "$(ssh-agent -s)"; ssh-add ~/.ssh/bsc'

# grun $fileName $name of grammar root -gui
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    alias antlr4='java -Xmx500M -cp "/usr/local/lib/antlr-4.10.1-complete.jar:$CLASSPATH" org.antlr.v4.Tool'
    alias grun='java -Xmx500M -cp "/usr/local/lib/antlr-4.10.1-complete.jar:$CLASSPATH" org.antlr.v4.gui.TestRig'
fi
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias antlr4='java -Xmx500M -cp "$HOME/.local/bin/antlr-4.10.1-complete.jar:$CLASSPATH" org.antlr.v4.Tool'
    alias grun='java -Xmx500M -cp "$HOME/.local/bin/antlr-4.10.1-complete.jar:$CLASSPATH" org.antlr.v4.gui.TestRig'
fi

scripts=$HOME/.local/scripts

# Alias to get context, since we do not want it cluttering our prompt all of the time, we want to  focus on what is important.
# name=$(whoami)
# host=$(hostname)
# context=$name@$host
# alias prompt="echo $context"

# Burn iso into usb
# sudo lsblk to look for usb
#sudo dd if=.iso of=/dev/sdb status=progress

# Fix discord long calls
# alias discord="discord --no-sandbox </dev/null &>/dev/null &"
alias rs="open -a Rstudio"
alias discord="discord --no-sandbox &"
# xmonad can't find dependancies https://wiki.archlinux.org/title/Xmonad#Problems_with_finding_shared_libraries_after_update
alias xmonad_fix="sudo ghc-pkg recache"
# Recompile ycm (if autocompletion stops working execute this)
alias ycminstall='python3 $HOME/.vim/plugged/YouCompleteMe/install.py'
# Rclone (be careful!) 
# "rclone config" first, better to use copy instead of "rclone sync" so that I do not delete books on accident while pushing or pulling, it becomes a mess, since if I pull i will delete any extra books I have locally, and if I push I will delete the extra books I have remotely, overall, a fucking mess
alias rclonepull_calibre="rclone -P copy drive:Calibre/Calibre\ Library ~/Calibre\ Library"
alias rclonepull_thunderbird="rclone -P copy drive:Thunderbird ~/.thunderbird"
alias rclonepush_calibre="rclone -P copy ~/Calibre\ Library drive:Calibre/Calibre\ Library"
alias rclonepush_thunderbird="rclone -P copy ~/.thunderbird drive:Thunderbird"

alias colemak='$HOME/.local/scripts/BigBagKbdTrixXKB/setxkb.sh "5ca es ks"'
# Config Files
alias aliases='nvim $ZDOTDIR/aliases'
alias arch='nvim $scripts/bootstrap/arch_functions'
alias bashrc='nvim $HOME/.bashrc'
alias dunstrc='nvim $HOME/.config/dunst/dunstrc'
alias i3config='nvim $HOME/.config/i3/config'
alias kitty.conf='nvim $HOME/.config/kitty/kitty.conf'
alias mac='nvim $scripts/bootstrap/mac_functions'
alias ubuntu='nvim $scripts/bootstrap/ubuntu_functions'
alias pacman.conf="sudo vim /etc/pacman.conf"
alias tmux.conf='nvim $HOME/.config/tmux/tmux.conf'
alias vimrc='nvim $HOME/.vim/vimrc'
alias xinitrc='nvim $HOME/.xinitrc'
alias xmonad.hs='nvim $HOME/.xmonad/xmonad.hs'
alias xprofile='nvim $HOME/.xprofile'
alias zprofile='nvim $ZDOTDIR/.zprofile'
alias zshenv='nvim $HOME/.zshenv'
alias zshrc='nvim $ZDOTDIR/.zshrc'
#alias vconfgrub="sudo vim /boot/grub/grub.cfg"
#alias vgrub="sudo vim /etc/default/grub"
#alias vlightdm="sudo vim /etc/lightdm/lightdm.conf"
#alias vmirrorlist="sudo vim /etc/pacman.d/mirrorlist"
#alias vmkinitcpio="sudo vim /etc/mkinitcpio.conf"

alias vim="nvim"
alias e="emacsclient -nc"
# modify in  /usr/share/applications as well
alias rstudio="rstudio-bin --no-sandbox"

alias disableSleep="sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target"
alias enableSleep="sudo systemctl unmask sleep.target suspend.target hibernate.target hybrid-sleep.target"

# Easier navigation: .., ..., ...., ....., ~ and -
alias cr='cd $HOME/repos'
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

## Colorize the grep command output for ease of use (good for log files)##
alias grep='grep -i --color=auto'
alias egrep='egrep -i --color=auto'
alias fgrep='fgrep -i --color=auto'

# adding flags
alias cp="cp -iv"          # confirm before overwriting something
alias mv="mv -iv"
alias mkd="mkdir -pv"
alias df="df -h"          # human-readable sizes
alias free="free -m"      # show sizes in MB

# Clear
alias c="clear"

# Git
alias gs="git status"
alias gf="git fetch"
alias gl="git pull"
alias ga="git add "
alias gm="git merge"
alias gc="git commit -m "
alias gp="git push"
alias gitsync="git submodule sync; git submodule update --init --recursive"
alias gsu="git submodule update --recursive --remote"

alias gr="git_recurse"
#yolo='git add -A; git commit -m "$(curl -s http://whatthecommit.com/index.txt)"; git push'
yolo="git_recurse -c \"git add -A; git commit -m 'This is a placeholder'; git push\" -d 1"
alias yolo="$yolo"

alias pull="git_recurse -c 'git pull'"
alias status="git_recurse -c 'git status'"

if command -v exa &> /dev/null
then
    alias ls="exa --group-directories-first"
    alias la="exa --group-directories-first -a"
    alias l="exa -a -F --long --header --links --group --group-directories-first --git"
else
    alias ls="ls -l"
    alias la="ls -a"
    # alias l="ls"
fi

# Print each PATH entry on a separate line
alias path='echo -e ${PATH//:/\\n}'
# Print enviroment variables: printenv

# Userlist
alias userlist="cut -d: -f1 /etc/passwd"

# Switch between bash and zsh
alias tobash='sudo chsh $USER -s /bin/bash && echo "Now log out."'
alias tozsh='sudo chsh $USER -s /bin/zsh && echo "Now log out."'

# Generalize commands
cleanup="vim +PlugClean +qall;
    pip3 cache purge;
    yarn cache clean
    npm cache clean --force
    "
update=""
updateall="python3 -m pip install --user --upgrade pynvim &;
    vim +PlugUpgrade +PlugUpdate +qall &; 
    antigen update &; 
    pip3 install --user --upgrade pip &
"
### MacOS
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias rm="rm -v"
    update="brew update; brew upgrade; sudo softwareupdate -i -a; xcode-select --install; "$update
    updateall=$update"npm install npm -g;
    "$updateall
    #emacs -f auto-package-update-now &;

    # sudo xcode-select -switch /Library/Developer/CommandLineTools
    # xcode-select --install installs developer tools that need to be updated with every update to MacOS
    cleanup="brew cleanup;sudo gem cleanup;"$cleanup
    # Recursively delete `.DS_Store` files
    alias clean="find . -type f -name '*.DS_Store' -ls -delete; find . -type f -name '._*' -exec rm -f {} \;
"
fi

if [[ "$OSTYPE" == "linux"* ]]; then

    alias rm="rm -vI"
    # Lock screen
    LockScreens=('pipes.sh' 'cmatrix')
    alias lock='${LockScreens[$RANDOM % 2]}'
    # Get the error messages from journalctl
    alias jctl="journalctl -p 3 -xb"
    # Check vulnerabilities microcode
    alias microcode="grep . /sys/devices/system/cpu/vulnerabilities/*"

    ### Arch & Manjaro
    if [[ "$DISTRO" == "arch" || "$DISTRO" == "manjaro" ]]; then
        update="sudo pacman -Syu;sudo snap refresh;"$update
        updateall="yay -Syu;npm update &;sudo snap refresh;
        emacs -f auto-package-update-now &;
        "$updateall
        # This breaks pacman sudo npm install -g npm; sudo gem update;
        # Cleans pacman and AUR cache and vim no longer used plugins
        cleanup="yay -Sc;"$cleanup
        #sudo pacman -R $(pacman -Qdtq)
        alias unlock="sudo rm /var/lib/pacman/db.lck" #pacman unlock
    fi

    ### Arch
    if [[ "$DISTRO" == "arch" ]]; then
        # Get fastest mirrors in your neighborhood
        alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
    fi

    ### Manjaro
    if [[ "$DISTRO" == "manjaro" ]]; then
        # Update mirrors and update
        alias mirror="sudo pacman-mirrors -f && sudo pacman -Syyu"
    fi

    ### Ubuntu
    if [[ "$DISTRO" == "ubuntu" ]]; then
        update="sudo apt-get update; sudo apt-get full-upgrade; "$update
        updateall=$update"emacs -f auto-package-update-now &;"$updateall
        cleanup="sudo apt-get autoclean; 
        sudo apt-get clean; 
        sudo apt-get autoremove; 
        brew cleanup; 
        "$cleanup
        alias tmux='tmux -f $HOME/.config/tmux/tmux.conf'
    fi

    ### Ubuntu_windows
    if [[ "$DISTRO" == "ubuntu_windows" ]]; then
        update="sudo apt-get update; sudo apt-get full-upgrade; "$update
        updateall=$update$updateall
        cleanup="sudo apt-get autoclean; 
        sudo apt-get clean; 
        sudo apt-get autoremove; 
        brew cleanup; 
        "$cleanup
        alias tmux='tmux -f $HOME/.config/tmux/tmux.conf'
    fi

    if [[ "$DISTRO" == "arch" || "$DISTRO" == "manjaro" ]]; then
        flags="-S --noconfirm --needed"
        alias \$pac="sudo pacman $flags"
        alias \$yay="yay $flags"
    fi

    if [[ "$DISTRO" == "ubuntu"* ]]; then
        # This works, its generally not recomended since now i cannot access variable with the same name, but that does not matter to me
        flags="-y"
        apt="sudo apt-get $flags install"
        alias \$apt=$apt
    fi
fi

# Do not surround with quotes
alias cleanup=$cleanup
alias updateall=$updateall
alias update=$update
###############################################################
# => Clean home directory
###############################################################

alias Xres='xrdb -load $HOME/.config/X11/xresources'
alias wget='wget --hsts-file="$XDG_CACHE_HOME/wget-hsts"'
